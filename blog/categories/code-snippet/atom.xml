<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code Snippet | Bits]]></title>
  <link href="http://bits.greenhalolabs.com/blog/categories/code-snippet/atom.xml" rel="self"/>
  <link href="http://bits.greenhalolabs.com/"/>
  <updated>2014-04-09T15:21:11-07:00</updated>
  <id>http://bits.greenhalolabs.com/</id>
  <author>
    <name><![CDATA[Green Halo Labs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code Snippet: AlphaImageButton]]></title>
    <link href="http://bits.greenhalolabs.com/blog/2014/03/26/alphaimagebutton/"/>
    <updated>2014-03-26T10:50:47-07:00</updated>
    <id>http://bits.greenhalolabs.com/blog/2014/03/26/alphaimagebutton</id>
    <content type="html"><![CDATA[<p>Showing different view states (pressed, focused, disabled, etc.) can be a bit cumbersome and tedious when styling views. As a way to reduce the number of states to customize, we created a subclass of a View (an <code>ImageButton</code> in this case but can be any other View subclass) that sets the alpha value depending on the enabled state &ndash; 1.0 if enabled, 0.5 if disabled. This way, the View is translucent when disabled and a custom drawable/asset is not required.</p>

<p>```
import android.content.Context;
import android.util.AttributeSet;
import android.widget.ImageButton;</p>

<p>public class AlphaImageButton extends ImageButton {</p>

<pre><code>private static final float ENABLED_ALPHA = 1.0f;
private static final float DISABLED_ALPHA = 0.5f;

public AlphaImageButton(Context context) {
    super(context);
}

public AlphaImageButton(Context context, AttributeSet attrs) {
    super(context, attrs);
}

public AlphaImageButton(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);
}

@Override
public void setEnabled(boolean enabled) {
    super.setEnabled(enabled);
    setAlpha((enabled ? ENABLED_ALPHA : DISABLED_ALPHA));
}
</code></pre>

<p>}
```</p>

<p><a href="https://gist.github.com/arriolac/9790179">https://gist.github.com/arriolac/9790179</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Snippet: AutoNextTextWatcher]]></title>
    <link href="http://bits.greenhalolabs.com/blog/2014/03/18/autonexttextwatcher/"/>
    <updated>2014-03-18T23:01:05-07:00</updated>
    <id>http://bits.greenhalolabs.com/blog/2014/03/18/autonexttextwatcher</id>
    <content type="html"><![CDATA[<p>A useful <code>TextWatcher</code> for auto-focusing to the next view once a certain character length has been reached on an <code>EditText</code>.</p>

<p>```
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.EditText;</p>

<p>/<em>*
 * Created by chris on 3/13/14.
 </em>/
public class AutoNextTextWatcher implements TextWatcher {</p>

<pre><code>private EditText mEditText;
private int mMaxLength;

public AutoNextTextWatcher(EditText editText, int maxLength) {
    mEditText = editText;
    mMaxLength = maxLength;
    editText.addTextChangedListener(this);
}

@Override
public void beforeTextChanged(CharSequence s, int start, int count, int after) {
}

@Override
public void onTextChanged(CharSequence s, int start, int before, int count) {
    if (mEditText.getText().length() &gt;= mMaxLength) {
        final View nextView = mEditText.focusSearch(View.FOCUS_DOWN);
        if (nextView != null) {
            nextView.requestFocus();
        }
    }
}

@Override
public void afterTextChanged(Editable s) {
}
</code></pre>

<p>}</p>

<p>```</p>

<p><a href="https://gist.github.com/arriolac/9636241">https://gist.github.com/arriolac/9636241</a></p>
]]></content>
  </entry>
  
</feed>
