<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code Snippet | Bits]]></title>
  <link href="http://bits.greenhalolabs.com/blog/categories/code-snippet/atom.xml" rel="self"/>
  <link href="http://bits.greenhalolabs.com/"/>
  <updated>2014-08-06T15:45:45-07:00</updated>
  <id>http://bits.greenhalolabs.com/</id>
  <author>
    <name><![CDATA[Green Halo Labs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code Snippet: BundleUtil]]></title>
    <link href="http://bits.greenhalolabs.com/blog/2014/08/06/bundle-utility-class/"/>
    <updated>2014-08-06T15:22:04-07:00</updated>
    <id>http://bits.greenhalolabs.com/blog/2014/08/06/bundle-utility-class</id>
    <content type="html"><![CDATA[<p>A utility class for serializing/deserializing Parcelables into/from a Bundle.</p>

<p>Check this out for an example: <a href="https://gist.github.com/arriolac/a66515bad322db0ce747">https://gist.github.com/arriolac/a66515bad322db0ce747</a></p>

<p>```
import android.os.Bundle;
import android.os.Parcelable;</p>

<p>/<em>*
 * Utility class for {@link android.os.Bundle}.
 * Created by chris on 8/6/14.
 </em>/
public class BundleUtil {</p>

<pre><code>private static final String EXTRA_PARCELABLE_COUNT = "parcelable_count";

/**
 * Creates a {@link Bundle} given a list of {@link android.os.Parcelable} objects. This is a
 * convenience method if all the values in the Bundle are Parcelables.
 *
 * @param args the {@link android.os.Parcelable} objects.
 * @return the resulting {@link Bundle}.
 */
public static Bundle createBundle(Parcelable... args) {
    final Bundle bundle = new Bundle();

    // Put Parcelable in bundle
    final int size = args.length;
    for (int i = 0; i &lt; size; i++) {
        bundle.putParcelable(String.valueOf(i), args[i]);
    }

    // Put size in bundle (needed when using
    bundle.putInt(EXTRA_PARCELABLE_COUNT, size);

    return bundle;
}

/**
 * NOTE: This method is used in conjunction with {@link #createBundle(android.os.Parcelable...)}.
 *
 * Returns an array of Parcelable objects contained within &lt;code&gt;bundle&lt;/code&gt;. The returned
 * array is returned in the same order they are passed in {@link #createBundle(android.os.Parcelable...)}.
 *
 * @param bundle the bundle
 * @return an array of Parcelables contained in &lt;code&gt;bundle&lt;/code&gt;.
 */
public static Parcelable[] getParcelablesFromBundle(Bundle bundle) {

    // Count how many Parcelable values in the bundle
    final int numOfParcelables = bundle.getInt(EXTRA_PARCELABLE_COUNT);

    // Get list of Parcelables
    final Parcelable[] parcelables = new Parcelable[numOfParcelables];
    for (int i = 0; i &lt; numOfParcelables; i++) {
        parcelables[i] = bundle.getParcelable(String.valueOf(i));
    }

    return parcelables;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Snippet: TopCropImageView]]></title>
    <link href="http://bits.greenhalolabs.com/blog/2014/04/09/code-snippet-topcropimageview/"/>
    <updated>2014-04-09T15:50:35-07:00</updated>
    <id>http://bits.greenhalolabs.com/blog/2014/04/09/code-snippet-topcropimageview</id>
    <content type="html"><![CDATA[<p>A top-crop scaling <code>ImageView</code> subclass.</p>

<p>```
import android.content.Context;
import android.graphics.Matrix;
import android.widget.ImageView;</p>

<p>/<em>*
 * ImageView to display top-crop scale of an image view.
 *
 * @author Chris Arriola
 </em>/
public class TopCropImageView extends ImageView {</p>

<pre><code>public TopCropImageView(Context context) {
    super(context);
    setScaleType(ScaleType.MATRIX);
}

@Override
protected boolean setFrame(int l, int t, int r, int b) {
    final Matrix matrix = getImageMatrix();

    float scale;
    final int viewWidth = getWidth() - getPaddingLeft() - getPaddingRight();
    final int viewHeight = getHeight() - getPaddingTop() - getPaddingBottom();
    final int drawableWidth = getDrawable().getIntrinsicWidth();
    final int drawableHeight = getDrawable().getIntrinsicHeight();

    if (drawableWidth * viewHeight &gt; drawableHeight * viewWidth) {
        scale = (float) viewHeight / (float) drawableHeight;
    } else {
        scale = (float) viewWidth / (float) drawableWidth;
    }

    matrix.setScale(scale, scale);
    setImageMatrix(matrix);

    return super.setFrame(l, t, r, b);
}        
</code></pre>

<p>}
```
<a href="https://gist.github.com/arriolac/3843346">https://gist.github.com/arriolac/3843346</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Snippet: AlphaImageButton]]></title>
    <link href="http://bits.greenhalolabs.com/blog/2014/03/26/alphaimagebutton/"/>
    <updated>2014-03-26T10:50:47-07:00</updated>
    <id>http://bits.greenhalolabs.com/blog/2014/03/26/alphaimagebutton</id>
    <content type="html"><![CDATA[<p>Showing different view states (pressed, focused, disabled, etc.) can be a bit cumbersome and tedious when styling views. As a way to reduce the number of states to customize, we created a subclass of a View (an <code>ImageButton</code> in this case but can be any other View subclass) that sets the alpha value depending on the enabled state &ndash; 1.0 if enabled, 0.5 if disabled. This way, the View is translucent when disabled and a custom drawable/asset is not required.</p>

<p>```
import android.content.Context;
import android.util.AttributeSet;
import android.widget.ImageButton;</p>

<p>public class AlphaImageButton extends ImageButton {</p>

<pre><code>private static final float ENABLED_ALPHA = 1.0f;
private static final float DISABLED_ALPHA = 0.5f;

public AlphaImageButton(Context context) {
    super(context);
}

public AlphaImageButton(Context context, AttributeSet attrs) {
    super(context, attrs);
}

public AlphaImageButton(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);
}

@Override
public void setEnabled(boolean enabled) {
    super.setEnabled(enabled);
    setAlpha((enabled ? ENABLED_ALPHA : DISABLED_ALPHA));
}
</code></pre>

<p>}
```</p>

<p><a href="https://gist.github.com/arriolac/9790179">https://gist.github.com/arriolac/9790179</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Snippet: AutoNextTextWatcher]]></title>
    <link href="http://bits.greenhalolabs.com/blog/2014/03/18/autonexttextwatcher/"/>
    <updated>2014-03-18T23:01:05-07:00</updated>
    <id>http://bits.greenhalolabs.com/blog/2014/03/18/autonexttextwatcher</id>
    <content type="html"><![CDATA[<p>A useful <code>TextWatcher</code> for auto-focusing to the next view once a certain character length has been reached on an <code>EditText</code>.</p>

<p>```
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.EditText;</p>

<p>/<em>*
 * Created by chris on 3/13/14.
 </em>/
public class AutoNextTextWatcher implements TextWatcher {</p>

<pre><code>private EditText mEditText;
private int mMaxLength;

public AutoNextTextWatcher(EditText editText, int maxLength) {
    mEditText = editText;
    mMaxLength = maxLength;
    editText.addTextChangedListener(this);
}

@Override
public void beforeTextChanged(CharSequence s, int start, int count, int after) {
}

@Override
public void onTextChanged(CharSequence s, int start, int before, int count) {
    if (mEditText.getText().length() &gt;= mMaxLength) {
        final View nextView = mEditText.focusSearch(View.FOCUS_DOWN);
        if (nextView != null) {
            nextView.requestFocus();
        }
    }
}

@Override
public void afterTextChanged(Editable s) {
}
</code></pre>

<p>}</p>

<p>```</p>

<p><a href="https://gist.github.com/arriolac/9636241">https://gist.github.com/arriolac/9636241</a></p>
]]></content>
  </entry>
  
</feed>
